#불필요한 비교를 건너뛰기 위한 함수
def find(pattern, char):
    #마지막 부분은 이미 가능성이 없으므로 그전부터 검사한다.
    for i in range(len(pattern)-2, -1, -1): #패턴과 텍스트의 틀린부분의 텍스트의 부분의 글자가 패턴에있으면 움직이는거임!
        if pattern[i] == char:
            return len(pattern) -i -1
    return len(pattern)  #일치하는 글자가 없다면 패턴의 길이만큼 이동한다.
def boyer_moore(pattern, text):
    P_l = len(pattern)
    T_l = len(text)
    i = 0
    result=[]
    while i <= T_l-P_l: #반복은 최대 긴텍스트 길이 - 작은텍스트 길이
        j = P_l - 1#-1을 해주는 이유는 인덱스가 0부터 시작하기 때문이다.
                    #뒤에서부터 검사하고 인덱스를 감소하는 형식이므로 0보다 이상일때만 동작한다.
        while j >= 0:#j만
            #끝글자부터 비교하면서 같다면 하나씩 감소하면서 비교한다.
            if pattern[j] != text[i+j]:
                #글자가 틀리다면 제일마지막 글자 기준으로 find 함수를 호출한다.
                move = find(pattern, text[i + P_l- 1])
                break
            j = j - 1
        if j == -1:
            result.append(i+1)
            i+=1
        else:
            i += move
    if result:
        return result
    return False
print(boyer_moore("ABC","ABDCABCCEABC"))
 
